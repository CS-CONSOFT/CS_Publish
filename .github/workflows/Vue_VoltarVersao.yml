# Objetivo: efetuar a volta do projeto para uma versão antiga
# Os ambientes de produção são diversos, ex. app1, app3, app4, etc...
# A URL Base que será consumida é diferente para cada ambiente. Ex. https://app1.csicorpnet.com.br; https://app3.csicorpnet.com.br, etc...
# Para atender esse requisito, definimos o ambiente que será passado. Ex. dev, prod, etc...
# Esses identificadores serão responsáveis por rotear a URL base de acordo com o ambiente desejado
# O mapeamento da URL se dá da seguinte maneira atualmente:

# dev aponta para ->       https://dsv17.csicorpnet.com.br - p: 8080
# prod_app1 aponta para -> https://app1.csicorpnet.com.br  - p: 8081
# prod_app3 aponta para -> https://app3.csicorpnet.com.br  - p: 8083
# prod_app4 aponta para -> https://app4.csicorpnet.com.br  - p: 8084

# Além disso, deve-se passar a porta de roteamento, que é a porta exposta pelo container no docker para que a URL possa ser trackeada e acessada

# ex Porta 8080 aponta para https://teste1.com.br
# Porta 8081 aponta para https://teste2.com.br

# Por fim, a versão deve ser fornecida, sendo ela o valor de versão do projeto. 


name: Vue_VoltarVersao

on:
  workflow_dispatch:
     inputs:
      ambiente:
        description: 'Nome do ambiente de deploy'
        required: true
        default: 'dev'  # Valor padrão será "dev"
      versao:
        description: 'Versao do projeto'
        required: true
        default: ''  


env:
  PORTA: ''  # Versão do Node a ser usada
  NOME_PASTA: 'CS_Icorp_Tabelas-01'  

# Definição dos jobs que o workflow irá executar
jobs:
  deploy: # Nome do job
    runs-on: ubuntu-latest # Especifica que o job será executado em um ambiente Ubuntu

    steps: # Lista das etapas que serão executadas
      - name: 01-Muda para o repositório do CS-IcorpVue
        uses: actions/checkout@v4
        with:
          repository: CS-CONSOFT/CS_Icorp_Vue  # Nome do repositório
          token: ${{ secrets.ACCESS_TOKEN_GITHUB }}  # Token de acesso, caso o repositório seja privadoUsa a ação oficial do GitHub para fazer o checkout

      - name: 02-Instalando SSH Client # Passo para instalar o cliente SSH
        run: sudo apt-get install openssh-client -y # Comando para instalar o cliente SSH

      - name: 03-Configurando SSH Access # Passo para configurar o acesso SSH
        run: |
          mkdir -p ~/.ssh # Cria o diretório .ssh
          echo "${{ secrets.AWS_EC2_KEY_PAIR }}" > ~/.ssh/aws_ec2_key # Salva a chave SSH secreta
          chmod 600 ~/.ssh/aws_ec2_key # Define as permissões para a chave
          ssh-keyscan -H ${{ secrets.AWS_EC2_INSTANCE_IP }} >> ~/.ssh/known_hosts # Adiciona a chave do servidor conhecido
          echo "StrictHostKeyChecking no" > ~/.ssh/config # Configura o SSH para não verificar a chave do host

      
      - name: 07-Configurando a porta com base no ambiente # Passo para configurar a URL da API com base no ambiente
        id: setup_env # Define um ID para o passo
        run: |
          if [ "${{ github.event.inputs.ambiente }}" == "prod_app1" ]; then
            echo "PORTA=8081" >> $GITHUB_ENV
          elif [ "${{ github.event.inputs.ambiente }}" == "prod_app3" ]; then
            echo "PORTA=8083" >> $GITHUB_ENV
          elif [ "${{ github.event.inputs.ambiente }}" == "prod_app4" ]; then
            echo "PORTA=8084" >> $GITHUB_ENV
          elif [ "${{ github.event.inputs.ambiente }}" == "dev" ]; then
            echo "PORTA=8080" >> $GITHUB_ENV
          fi

      - name: 05-Gerando container o Containers on EC2
        run: |
          ssh -i ~/.ssh/aws_ec2_key ubuntu@${{ secrets.AWS_EC2_INSTANCE_IP }} "
            cd /home/ubuntu/${{env.NOME_PASTA}} && 
           (sudo docker stop csct-tabelas_${{ github.event.inputs.ambiente }}; sudo docker rm -f csct-tabelas_${{ github.event.inputs.ambiente }}; sudo docker run --name csct-tabelas_${{ github.event.inputs.ambiente }} --restart=always -d -p ${{env.PORTA}}:80 csim-tabelas_${{github.event.inputs.ambiente}}_${{github.event.inputs.versao}})
          "

      
# (sudo docker stop csct-tabelas_; sudo docker rm -f csct-tabelas_; sudo docker run --name csct-tabelas_ --restart=always -d -p csim-tabelas_:80 csim-tabelas_)