# Objetivo: efetuar deploy do produto CS-Icorp Tabelas nos ambientes de homologação e produção
# Os ambientes de produção são diversos, ex. app1, app3, app4, etc...
# A URL Base que será consumida é diferente para cada ambiente. Ex. https://app1.csicorpnet.com.br; https://app3.csicorpnet.com.br, etc...
# Para atender esse requisito, definimos o ambiente que será passado. Ex. dev, prod, etc...
# Esses identificadores serão responsáveis por rotear a URL base de acordo com o ambiente desejado
# O mapeamento da URL se dá da seguinte maneira atualmente:

# dev aponta para       -> https://dsv17.csicorpnet.com.br
# prod_app1 aponta para -> https://app1.csicorpnet.com.br
# prod_app3 aponta para -> https://app3.csicorpnet.com.br
# prod_app4 aponta para -> https://app4.csicorpnet.com.br

# Por fim, a versão deve ser fornecida, sendo ela o valor de versão do projeto. 


name: Vue.02-Icorp-Deploy da imagem/container do projeto
on:
  workflow_dispatch:
     inputs:
      ambiente:
        description: 'Nome do ambiente de deploy'
        required: true
        default: 'dev'  
      versao:
        description: 'Versao do projeto Ex. 2024_09_01. Será o nome da IMAGEM no contexto docker'
        required: true
        default: ''  
      primeiro_container:
        description: 'Seta se é a primeira vez gerando o container. Deve ser true ou false'
        required: true
        default: 'false'  
      branch:
        description: 'Branch para rodar o projeto'
        required: true
        default: 'cs-homl'  


env:
  VITE_API_URL: ''  
  NOME_PASTA: 'CS_Icorp_Tabelas-01'  
  VITE_VERSION_CODE_PROJECT: ''
  PORTA: ''

# Definição dos jobs que o workflow irá executar
jobs:
  deploy: # Nome do job
    runs-on: ubuntu-latest # Especifica que o job será executado em um ambiente Ubuntu

    steps: # Lista das etapas que serão executadas
      - name: 01-Muda para o repositório do CS-IcorpVue
        uses: actions/checkout@v4
        with:
          repository: CS-CONSOFT/CS_Icorp_Vue  # Nome do repositório
          token: ${{ secrets.ACCESS_TOKEN_GITHUB }}  # Token de acesso, caso o repositório seja privado
          ref: ${{github.event.inputs.branch}}

      - name: 02-Instalando SSH Client # Passo para instalar o cliente SSH
        run: sudo apt-get install openssh-client -y # Comando para instalar o cliente SSH

      - name: 03-Configurando SSH Access # Passo para configurar o acesso SSH
        run: |
          mkdir -p ~/.ssh # Cria o diretório .ssh
          echo "${{ secrets.AWS_EC2_KEY_PAIR }}" > ~/.ssh/aws_ec2_key # Salva a chave SSH secreta
          chmod 600 ~/.ssh/aws_ec2_key # Define as permissões para a chave
          ssh-keyscan -H ${{ secrets.AWS_EC2_INSTANCE_IP }} >> ~/.ssh/known_hosts # Adiciona a chave do servidor conhecido
          echo "StrictHostKeyChecking no" > ~/.ssh/config # Configura o SSH para não verificar a chave do host

      # Pega o VITE_API_URL com base no ambiente (passado como input)
      - name: 04-Configurando VITE_API_URL com base no ambiente # Passo para configurar a URL da API com base no ambiente
        id: setup_env # Define um ID para o passo
        run: |
          if [ "${{ github.event.inputs.ambiente }}" == "prod_app1" ]; then
            echo "VITE_API_URL=${{ secrets.APP1_URL_AMBIENTE }}" >> $GITHUB_ENV # Define a URL para produção
            echo "PORTA=8081" >> $GITHUB_ENV
          elif [ "${{ github.event.inputs.ambiente }}" == "prod_app3" ]; then
            echo "VITE_API_URL=${{ secrets.APP3_URL_AMBIENTE }}" >> $GITHUB_ENV # Define a URL para produção
            echo "PORTA=8083" >> $GITHUB_ENV
          elif [ "${{ github.event.inputs.ambiente }}" == "prod_app4" ]; then
            echo "VITE_API_URL=${{ secrets.APP4_URL_AMBIENTE }}" >> $GITHUB_ENV # Define a URL para produção
            echo "PORTA=8084" >> $GITHUB_ENV
          elif [ "${{ github.event.inputs.ambiente }}" == "dev" ]; then
            echo "VITE_API_URL=${{ secrets.DEV_VITE_API_URL }}" >> $GITHUB_ENV # Define a URL para desenvolvimento
            echo "PORTA=8080" >> $GITHUB_ENV
          fi


      - name: 04.1-Configura a versao do projeto 
        id: setup_env_proj
        run: |
         echo "VITE_VERSION_CODE_PROJECT=${{ github.event.inputs.versao}}" >> $GITHUB_ENV # Define a VERSAO DO PROJETO


      - name: 05-Gerando imagem no EC2 # Passo para gerar a imagem Docker
        run: |
          ssh -i ~/.ssh/aws_ec2_key ubuntu@${{ secrets.AWS_EC2_INSTANCE_IP }} "
            cd /home/ubuntu/${{env.NOME_PASTA}} && 
            sudo docker build -t csim-tabelas_${{github.event.inputs.ambiente}}_${{github.event.inputs.versao}} .
          "

      - name: 06-Gerando container o Containers on EC2
        run: |
          ssh -i ~/.ssh/aws_ec2_key ubuntu@${{ secrets.AWS_EC2_INSTANCE_IP }} "
            cd /home/ubuntu/${{env.NOME_PASTA}} && 

          if [ "${{ github.event.inputs.primeiro_container }}" == "true" ]; then
           \ (sudo docker run --name csct-tabelas_${{ github.event.inputs.ambiente }} --restart=always -d -p ${{env.PORTA}}:80 csim-tabelas_${{github.event.inputs.ambiente}}_${{github.event.inputs.versao}}
          else
            (sudo docker stop csct-tabelas_${{ github.event.inputs.ambiente }}; sudo docker rm -f csct-tabelas_${{ github.event.inputs.ambiente }}; sudo docker run -e VITE_API_URL=${{env.VITE_API_URL}} --name csct-tabelas_${{ github.event.inputs.ambiente }} --restart=always -d -p ${{env.PORTA}}:80 csim-tabelas_${{github.event.inputs.ambiente}}_${{github.event.inputs.versao}})
          fi
          "
  
# sudo docker stop csct-tabelas_; sudo docker rm -f csct-tabelas; 
# (sudo docker stop csct-tabelas_; sudo docker rm -f csct-tabelas_; sudo docker run --name csct-tabelas_ --restart=always -d -p csim-tabelas_:80 csim-tabelas_)
